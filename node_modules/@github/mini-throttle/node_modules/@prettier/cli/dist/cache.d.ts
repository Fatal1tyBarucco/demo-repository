/// <reference types="node" />
import type Logger from "./logger.js";
import type { Options, PromiseMaybe } from "./types.js";
type Store = Partial<{
    [version: string]: StoreVersion;
}>;
type StoreVersion = Partial<{
    modified: number;
    files: Partial<Record<string, StoreFile | false>>;
}>;
type StoreFile = [hash: string, formatted: boolean];
type FileData = {
    content?: Buffer | string;
    formatted?: boolean;
    save: (formatted: boolean, fileContentExpected: string) => void;
};
declare class Cache {
    private version;
    private rootPath;
    private storePath;
    private store;
    private logger;
    private dirty;
    constructor(version: string, rootPath: string, options: Options, logger: Logger);
    cleanup(store: Store): Store;
    read(): Store;
    write(): void;
    get(filePath: string): FileData;
    set(filePath: string, fileRelativePath: string, fileFormatted: boolean, fileContentExpected: string): void;
    has(filePath: string, isIgnored: () => PromiseMaybe<boolean>): Promise<boolean>;
}
export default Cache;
