import fastIgnore from "fast-ignore";
import fs from "node:fs/promises";
import path from "node:path";
import Known from "./known.js";
import { fastJoinedPath, fastRelativeChildPath, isString, isUndefined, memoize, noop, someOf, zipObjectUnless } from "./utils.js";
const getIgnoreContent = (folderPath, fileName) => {
    const filePath = fastJoinedPath(folderPath, fileName);
    if (!Known.hasFilePath(filePath))
        return;
    return fs.readFile(filePath, "utf8").catch(noop);
};
const getIgnoresContent = memoize(async (folderPath, filesNames) => {
    const contentsRaw = await Promise.all(filesNames.map((fileName) => getIgnoreContent(folderPath, fileName)));
    const contents = contentsRaw.filter(isString);
    if (!contents.length)
        return;
    return contents;
});
const getIgnoresContentMap = async (foldersPaths, filesNames) => {
    const contents = await Promise.all(foldersPaths.map((folderPath) => getIgnoresContent(folderPath, filesNames)));
    const map = zipObjectUnless(foldersPaths, contents, isUndefined);
    return map;
};
const getIgnoreBy = (folderPath, filesContents) => {
    const ignore = fastIgnore(filesContents);
    return (filePath) => {
        const fileRelativePath = fastRelativeChildPath(folderPath, filePath);
        return !!fileRelativePath && ignore(fileRelativePath);
    };
};
const getIgnoreBys = (foldersPaths, filesContents) => {
    if (!foldersPaths.length)
        return;
    const ignores = foldersPaths.map((folderPath, index) => getIgnoreBy(folderPath, filesContents[index]));
    const ignore = someOf(ignores);
    return ignore;
};
const getIgnores = memoize(async (folderPath, filesNames) => {
    const contents = await getIgnoresContent(folderPath, filesNames);
    if (!contents?.length)
        return;
    const ignore = getIgnoreBy(folderPath, contents);
    return ignore;
});
const getIgnoresUp = memoize(async (folderPath, filesNames) => {
    const ignore = await getIgnores(folderPath, filesNames);
    const folderPathUp = path.dirname(folderPath);
    const ignoreUp = folderPath !== folderPathUp ? await getIgnoresUp(folderPathUp, filesNames) : undefined;
    const ignores = ignore ? (ignoreUp ? [ignore, ignoreUp] : [ignore]) : ignoreUp ? [ignoreUp] : [];
    if (!ignores.length)
        return;
    const ignoreAll = someOf(ignores);
    return ignoreAll;
});
const getIgnoreResolved = async (filePath, filesNames) => {
    const folderPath = path.dirname(filePath);
    const ignore = await getIgnoresUp(folderPath, filesNames);
    const ignored = !!ignore?.(filePath);
    return ignored;
};
export { getIgnoresContent, getIgnoresContentMap, getIgnoreBy, getIgnoreBys, getIgnores, getIgnoresUp, getIgnoreResolved };
