/* IMPORT */
import escapeRegExp from 'string-escape-regex';
import parse from './parse.js';
/* HELPERS */
const STAR_RE = /^\*+$/;
const STATIC_RE = /^[ a-zA-Z0-9/._-]*$/;
const FLEXIBLE_START_RE = /^\*+([ a-zA-Z0-9/._-]*)$/;
const FLEXIBLE_END_RE = /^([ a-zA-Z0-9/._-]*)\*+$/;
/* MAIN */
const matcher = (glob, caseSensitive) => {
    /* STAR SPECIAL-CASE */
    if (STAR_RE.test(glob)) {
        return () => true;
    }
    /* STATIC SPECIAL-CASE */
    if (STATIC_RE.test(glob)) {
        if (caseSensitive) {
            return (segment) => segment === glob;
        }
        else {
            const globLowerCase = glob.toLowerCase();
            const globLength = globLowerCase.length;
            return (segment) => segment.length === globLength && (segment.toLowerCase() === globLowerCase);
        }
    }
    /* FLEXIBLE START SPECIAL-CASE */
    const end = FLEXIBLE_START_RE.exec(glob)?.[1];
    if (end) {
        if (caseSensitive) {
            return (segment) => segment.endsWith(end);
        }
        else {
            const re = new RegExp(`${escapeRegExp(end)}$`, 'i');
            return (segment) => re.test(segment);
        }
    }
    /* FLEXIBLE END SPECIAL-CASE */
    const start = FLEXIBLE_END_RE.exec(glob)?.[1];
    if (start) {
        if (caseSensitive) {
            return (segment) => segment.startsWith(start);
        }
        else {
            const re = new RegExp(`^${escapeRegExp(start)}`, 'i');
            return (segment) => re.test(segment);
        }
    }
    /* GENERAL CASE */
    const re = parse(glob, caseSensitive);
    return (segment) => re.test(segment);
};
/* EXPORT */
export default matcher;
