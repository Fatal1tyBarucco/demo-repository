/* IMPORT */
import WorkerFrontend from './frontend.js';
/* MAIN */
class Worker {
    /* CONSTRUCTOR */
    constructor(methods, name) {
        this.busy = false;
        this.loaded = false;
        this.terminated = false;
        this.name = name;
        this.methods = methods;
        this.worker = new WorkerFrontend(this.methods, this.name, this.onMessage.bind(this));
        this.init();
    }
    /* EVENTS API */
    onMessage(message) {
        if (message.type === 'ready')
            return this.onMessageReady(message);
        if (message.type === 'result')
            return this.onMessageResult(message);
    }
    onMessageReady(message) {
        this.loaded = true;
        this.tick();
    }
    onMessageResult(message) {
        const { task } = this;
        if (!task)
            throw new Error(`WorkTank Worker (${this.name}): missing task`);
        this.busy = false;
        this.task = undefined;
        if ('value' in message) { // Success
            return task.resolve(message.value);
        }
        else { // Error
            const error = Object.assign(new Error(), message.error);
            return task.reject(error);
        }
    }
    /* API */
    init() {
        this.worker.send({ type: 'init' });
    }
    exec(task) {
        if (this.terminated || this.task || this.busy)
            throw new Error(`WorkTank Worker (${this.name}): already busy or terminated`);
        this.task = task;
        this.tick();
    }
    terminate() {
        this.terminated = true;
        this.worker.terminate();
        if (this.task) {
            const error = new Error(`WorkTank Worker (${this.name}): terminated`);
            this.task.reject(error);
        }
    }
    tick() {
        if (this.terminated || !this.loaded || !this.task || this.busy)
            return;
        const { method, args } = this.task;
        if (typeof method !== 'string')
            throw new Error('Unsupported method name');
        this.busy = true;
        this.worker.send({ type: 'exec', method, args });
    }
}
/* EXPORT */
export default Worker;
