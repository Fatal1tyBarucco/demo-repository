import type { CustomElementClass } from './custom-element.js';
import type { ControllableClass } from './controllable.js';
declare const attrChangedCallback: unique symbol;
export interface Attrable {
    [key: PropertyKey]: unknown;
    [attrChangedCallback](changed: Map<PropertyKey, unknown>): void;
}
export interface AttrableClass {
    new (): Attrable;
}
declare const attr: import("./mark.js").PropertyDecorator, getAttr: (instance: Element & Attrable) => Set<PropertyKey>;
export { attr, getAttr, attrChangedCallback };
export declare const attrable: <T extends CustomElementClass>(Class: T) => T & ControllableClass & AttrableClass;
//# sourceMappingURL=attrable.d.ts.map