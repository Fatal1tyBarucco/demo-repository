import type { CustomElementClass } from './custom-element.js';
import type { ControllableClass } from './controllable.js';
export interface Targetable {
    [targetChangedCallback](key: PropertyKey, target: Element): void;
    [targetsChangedCallback](key: PropertyKey, targets: Element[]): void;
}
export interface TargetableClass {
    new (): Targetable;
}
declare const targetChangedCallback: unique symbol;
declare const targetsChangedCallback: unique symbol;
declare const target: import("./mark.js").PropertyDecorator, getTarget: (instance: Element) => Set<PropertyKey>;
declare const targets: import("./mark.js").PropertyDecorator, getTargets: (instance: Element) => Set<PropertyKey>;
export { target, getTarget, targets, getTargets, targetChangedCallback, targetsChangedCallback };
export declare const targetable: <T extends CustomElementClass>(Class: T) => T & ControllableClass & TargetableClass;
//# sourceMappingURL=targetable.d.ts.map