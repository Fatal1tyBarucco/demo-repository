import Pioppo from "pioppo";
import { color } from "specialist";
import Spinner from "tiny-spinner";
import { resolve } from "./utils.js";
class Logger {
    constructor(level) {
        this.pioppo = new Pioppo();
        this.levels = ["silent", "debug", "log", "warn", "error"];
        this.absract = (message, strength) => {
            if (strength < this.strength)
                return;
            message = resolve(message);
            if (!message)
                return;
            this.pioppo.info(message);
        };
        this.silent = (message) => {
            this.absract(message, 0);
        };
        this.debug = (message) => {
            this.absract(message, 1);
        };
        this.log = (message) => {
            this.absract(message, 2);
        };
        this.warn = (message) => {
            this.absract(message, 3);
        };
        this.error = (message) => {
            this.absract(message, 4);
        };
        this.always = (message) => {
            this.absract(message, Infinity);
        };
        this.prefixed = {
            abstract: (prefix, message, strength) => {
                if (strength < this.strength)
                    return;
                message = resolve(message);
                if (!message)
                    return;
                const lines = message.split(/\r?\n|\r/g);
                const linesPrefixed = lines.map((line) => `${prefix} ${line}`);
                this.pioppo.info(linesPrefixed.join("\n"));
            },
            silent: (message) => {
                const prefix = `[${color.dim("silent")}]`;
                this.prefixed.abstract(prefix, message, 0);
            },
            debug: (message) => {
                const prefix = `[${color.magenta("debug")}]`;
                this.prefixed.abstract(prefix, message, 1);
            },
            log: (message) => {
                const prefix = `[${color.cyan("log")}]`;
                this.prefixed.abstract(prefix, message, 2);
            },
            warn: (message) => {
                const prefix = `[${color.yellow("warn")}]`;
                this.prefixed.abstract(prefix, message, 3);
            },
            error: (message) => {
                const prefix = `[${color.red("error")}]`;
                this.prefixed.abstract(prefix, message, 4);
            },
            always: (message) => {
                this.absract(message, Infinity);
            },
        };
        this.spinner = {
            abstract: (strength) => {
                if (strength < this.strength)
                    return;
                return new Spinner();
            },
            silent: () => {
                return this.spinner.abstract(0);
            },
            debug: () => {
                return this.spinner.abstract(1);
            },
            log: () => {
                return this.spinner.abstract(2);
            },
            warn: () => {
                return this.spinner.abstract(3);
            },
            error: () => {
                return this.spinner.abstract(4);
            },
            always: () => {
                return this.spinner.abstract(Infinity);
            },
        };
        this.level = level;
        this.strength = this.levels.indexOf(level);
    }
}
export default Logger;
