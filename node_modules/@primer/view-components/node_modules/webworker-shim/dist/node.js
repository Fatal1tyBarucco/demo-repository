/* IMPORT */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _WorkerShim_worker;
import { Worker } from 'node:worker_threads';
/* MAIN */
class WorkerShim extends EventTarget {
    /* CONSTRUCTOR */
    constructor(url, options) {
        super();
        /* VARIABLES */
        _WorkerShim_worker.set(this, void 0);
        /* CREATE */
        const prefix = 'data:text/javascript;charset=utf-8,';
        if (!url.startsWith(prefix))
            throw new Error(`Only urls that start with "${prefix}" are supported`);
        const setup = encodeURIComponent('import {parentPort} from "node:worker_threads";globalThis.self = globalThis;globalThis.addEventListener = parentPort.on.bind ( parentPort );globalThis.postMessage = parentPort.postMessage.bind ( parentPort );');
        const module = url.slice(prefix.length);
        const code = `${prefix}${setup}${module}`;
        __classPrivateFieldSet(this, _WorkerShim_worker, new Worker(new URL(code)), "f");
        /* INIT */
        __classPrivateFieldGet(this, _WorkerShim_worker, "f").on('message', data => {
            const event = new Event('message');
            event['data'] = data;
            this.dispatchEvent(event);
        });
        __classPrivateFieldGet(this, _WorkerShim_worker, "f").on('error', error => {
            error['type'] = 'error';
            this.dispatchEvent(error); //TSC
        });
        __classPrivateFieldGet(this, _WorkerShim_worker, "f").on('exit', () => {
            const event = new Event('close');
            this.dispatchEvent(event);
        });
    }
    postMessage(message, data = message) {
        const event = new Event(message);
        event['data'] = data;
        __classPrivateFieldGet(this, _WorkerShim_worker, "f").postMessage(event);
    }
    terminate() {
        __classPrivateFieldGet(this, _WorkerShim_worker, "f").terminate();
    }
}
_WorkerShim_worker = new WeakMap();
/* EXPORT */
export default globalThis.Worker || WorkerShim;
