import type { Methods, MethodsNames, MethodsProxied, MethodArguments, MethodReturn, Options } from './types';
declare class WorkTank<T extends Methods> {
    private terminated;
    private terminateTimeout;
    private terminateTimeoutId?;
    private timeout;
    private name;
    private size;
    private methods;
    private tasksBusy;
    private tasksReady;
    private workersBusy;
    private workersReady;
    constructor(options: Options<T>);
    private _autoterminate;
    private _getMethods;
    private _getTaskReady;
    private _getWorkerName;
    private _getWorkerReady;
    private _getWorkersWarm;
    exec<U extends MethodsNames<T>>(method: U, args: MethodArguments<T, U>): Promise<Awaited<MethodReturn<T, U>>>;
    proxy(): MethodsProxied<T>;
    terminate(): void;
    tick(): void;
}
export default WorkTank;
